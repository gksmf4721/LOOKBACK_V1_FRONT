/*
import axios, {AxiosInstance} from "axios";
import {useRuntimeConfig} from "#app";

export default defineNuxtPlugin((nuxtApp) => {
    //axios 인스턴스 생성
    const config = useRuntimeConfig();
    const api:AxiosInstance = axios.create({
        baseURL: config.public.apiBase, //API 기본 URL
        timeout: 20000, // 요청 타임아웃 설정 (20초)
        headers: {
            "Content-Type": "application/json",
        },
    })/*
import axios, {AxiosInstance} from "axios";
import {useRuntimeConfig} from "#app";

export default defineNuxtPlugin((nuxtApp) => {
    //axios 인스턴스 생성
    const config = useRuntimeConfig();
    const api:AxiosInstance = axios.create({
        baseURL: config.public.apiBase, //API 기본 URL
        timeout: 20000, // 요청 타임아웃 설정 (20초)
        headers: {
            "Content-Type": "application/json",
        },
    })

    //요청 인터셉터
    api.interceptors.request.use(
        (config) => {
            // 모든 요청에 Authorization 헤더 추가
            const token = localStorage.getItem("jwtToken");
            const refreshToken = localStorage.getItem("refreshToken");
            if (token) {
                config.headers.Authorization = `Bearer ${token}`
            }
            if (refreshToken) {
                config.headers["Refresh-Token"] = refreshToken;
            }
            return config;
        },
        (error)=> {
            console.error("요청 인터셉터 오류:", error);
            return Promise.reject(error);
        }
    );

    nuxtApp.provide("api", api as AxiosInstance);
})*/


//요청 인터셉터
    api.interceptors.request.use(
        (config) => {
            // 모든 요청에 Authorization 헤더 추가
            const token = localStorage.getItem("jwtToken");
            const refreshToken = localStorage.getItem("refreshToken");
            if (token) {
                config.headers.Authorization = `Bearer ${token}`
            }
            if (refreshToken) {
                config.headers["Refresh-Token"] = refreshToken;
            }
            return config;
        },
        (error)=> {
            console.error("요청 인터셉터 오류:", error);
            return Promise.reject(error);
        }
    );

    nuxtApp.provide("api", api as AxiosInstance);
})*/
